#include "EEPROMHandler.h"

void EEPROMHandler::begin() {
  //   EEPROM.begin(sizeof(EEPROMConfig));
  EEPROM.begin(512);
  delay(1000);  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  Serial.println("üìÄ EEPROM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
}

EEPROMConfig EEPROMHandler::getDefaultConfig() {
  EEPROMConfig config;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  strncpy(config.ssidAP, "ESP_Config", sizeof(config.ssidAP));
  config.ssidAP[sizeof(config.ssidAP) - 1] = '\0';

  strncpy(config.passwordAP, "11111111", sizeof(config.passwordAP));
  config.passwordAP[sizeof(config.passwordAP) - 1] = '\0';

  strncpy(config.ssid, "ESP_Config", sizeof(config.ssid));
  config.ssid[sizeof(config.ssid) - 1] = '\0';

  strncpy(config.password, "11111111", sizeof(config.password));
  config.password[sizeof(config.password) - 1] = '\0';

  strncpy(config.lastColor, "blue", sizeof(config.lastColor));
  config.lastColor[sizeof(config.lastColor) - 1] = '\0';

  config.connected = false;
  config.bootCount = 0;
  config.brightness = 100;

  return config;
}

void EEPROMHandler::loadConfig(EEPROMConfig& config) {
  Serial.println("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ EEPROM...");

  Serial.println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
  if (strlen(config.ssid) > 0 && config.ssid[0] != 0xFF) {  // –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    Serial.println("‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
    for (int i = 0; i < 512; i++) {
      EEPROM.write(i, 0);
    }
    EEPROM.commit();
    Serial.println("üßπ EEPROM –æ—á–∏—â–µ–Ω–∞");
    EEPROMConfig defaultConfig = getDefaultConfig();
    if (saveConfig(defaultConfig)) {
      config = defaultConfig;
    }
  } else {
    EEPROM.get(CONFIG_ADDRESS, config);
    Serial.println("üìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");
    printConfig(config);
  }
}

bool EEPROMHandler::saveConfig(const EEPROMConfig& config) {
  Serial.println("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ EEPROM...");
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ EEPROM
  EEPROM.put(CONFIG_ADDRESS, config);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (EEPROM.commit()) {
    Serial.println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    Serial.println("üìä –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");

    printConfig(config);
    return true;
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ EEPROM");
    return false;
  }
}

void EEPROMHandler::printConfig(const EEPROMConfig& config) {
  if (!config.connected) {
    Serial.println("  ‚úÖ Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:");
    Serial.print("  üì∂ SSID: ");
    Serial.println(config.ssidAP);
    Serial.print("  üîë –ü–∞—Ä–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: ");
    Serial.println(config.passwordAP);
  } else {
    Serial.println("  ‚úÖ Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:");
    Serial.printf("  üì∂ SSID:  ");
    Serial.println(config.ssid);
  }
  Serial.printf("  üé® –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–≤–µ—Ç: ");
  Serial.println(config.lastColor);
  Serial.printf("  üîÑ –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫: %u\n", config.bootCount);
  Serial.printf("  üí° –Ø—Ä–∫–æ—Å—Ç—å: %d\n", config.brightness);
  Serial.println();
}